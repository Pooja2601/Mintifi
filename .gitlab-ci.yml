image: docker:latest

stages:
  - test
  - build
  - deploy

test:
  stage: test
  script: echo "Running tests"
  only:
    - development 

build:
  stage: build
  image: google/cloud-sdk
  services:
    - docker:dind
  script:
    - echo "$GCP_SERVICE_KEY" > gcloud-service-key.json # Google Cloud service accounts
    - gcloud auth activate-service-account --key-file gcloud-service-key.json
    - gcloud config set project $GCP_PROJECT_ID
    - gcloud builds submit . --config=ci/cloudbuild.yml --substitutions _IMAGE_NAME=$CI_PROJECT_NAME,_VERSION=$(echo $CI_COMMIT_SHA | cut -c8-25)
  only:
    - development

deploy_stage:
  stage: deploy
  image: google/cloud-sdk
  script: 
    - echo "Deploy to QA"
    - create_deployment_files
    - apply_and_rollout
  environment:
    name: qa
    url: https://test.pay.$MY_DOMAIN
  only:
    - development

# Custom Functions -------------------------------------------------------
.custom_functions: &custom_functions |
  export VERSION=$(echo $CI_COMMIT_SHA | cut -c8-25)
  export SECRET_NAME=tls-$CI_PROJECT_NAME-$CI_ENVIRONMENT_SLUG
  export REPLICAS=3
  export TRACK=stable

  function config_kubernetes() {
    kubectl config set-cluster $KUBE_NAME --server="$KUBE_URL" --insecure-skip-tls-verify=true
    kubectl config set-credentials cluster-admin --username="$KUBE_USER" --password="$KUBE_PASSWORD"
    kubectl config set-context default --user=cluster-admin
    kubectl config use-context default
  }
  
  function create_deployment_files() {
    ## Deployment file substitutions
    sed 's/_APP_NAME_/'"$CI_PROJECT_NAME"'/g; s/_VERSION_/'"$VERSION"'/g; s/_CI_ENVIRONMENT_SLUG_/'"$CI_ENVIRONMENT_SLUG"'/g; s/_PROJECT_NAME_/'"$GCP_PROJECT_ID"'/g; s/_REPLICAS_/'"$REPLICAS"'/g; s/_TRACK_/'"$TRACK"'/g;' ci/kubernetes.tpl.deployment.yaml > deployment.yaml;
    
    ## Ingress file substitutions
    if [[ "$USE_SSL" != "True" ]]; then
      sed 's/_APP_NAME_/'"$CI_PROJECT_NAME"'/g; s/_CI_ENVIRONMENT_SLUG_/'"$CI_ENVIRONMENT_SLUG"'/g; s/_MY_DOMAIN_/'"$MY_DOMAIN"'/g;' ci/kubernetes.tpl.ingress.yaml > ingress.yaml;
    else
      sed 's/_APP_NAME_/'"$CI_PROJECT_NAME"'/g; s/_CI_ENVIRONMENT_SLUG_/'"$CI_ENVIRONMENT_SLUG"'/g; s/_MY_DOMAIN_/'"$MY_DOMAIN"'/g;' ci/kubernetes.tpl.ingress-ssl.yaml > ingress.yaml;
    fi
    
    ## Service file substitutions
    sed 's/_APP_NAME_/'"$CI_PROJECT_NAME"'/g; s/_CI_ENVIRONMENT_SLUG_/'"$CI_ENVIRONMENT_SLUG"'/g;' ci/kubernetes.tpl.service.yaml > service.yaml;
  }

  function apply_and_rollout() {
    cat deployment.yaml
    cat service.yaml
    cat ingress.yaml
    kubectl apply -f deployment.yaml
    kubectl apply -f service.yaml
    kubectl apply -f ingress.yaml
    kubectl rollout status -f deployment.yaml
    kubectl get all,ing -l app=$CI_PROJECT_NAME-$CI_ENVIRONMENT_SLUG
  }

before_script:
  - *custom_functions
